# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
aliases:
  # Cache management
  #
  # Saves dependencies to cache
  - &save-dependencies
    paths:
      - node_modules
    key: v1-dependencies-{{ checksum "yarn.lock" }}

  # Restores dependencies from cache
  - &restore-dependencies
    keys:
      - v1-dependencies-{{ checksum "yarn.lock" }}
      - v1-dependencies-

  # Saves built apps to cache
  - &save-apps
    paths:
      - packages/explorer/build
      - packages/player/build
    key: built-apps-{{ .Revision }}

  # Restores apps from cache
  - &restore-apps
    keys:
      - built-apps-{{ .Revision }}

  # Commands

  # Downloads and setup Code Climate reporter
  - &reporter
    name: Setup Code Climate test-reporter
    command: |
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
      chmod +x ./cc-test-reporter

  # Runs LivepeerJs tests
  - &tests
    name: Run tests
    command: |
      yarn test
      yarn test:build-apps

  # Installs dependencies for packages
  - &install-dependencies
    name: Install dependencies
    command: |
      yarn install

  # Runs reporter and shows test coverage
  - &show-test-report
    name: Report coverage
    command: |
      yarn coverage
      ./cc-test-reporter after-build

  - &build-apps
    name: Build React applications
    command: |
      yarn
      # TODO: Fix linting errors so this can be true
      export CI=false
      yarn build

  # Installs AWS cli
  - &install-aws-cli
    name: Install awscli
    command: sudo pip install awscli

  # Install libsecret
  - &install-libsecret
    name: Install libsecret
    command: sudo apt install libsecret-1-0

  # Extention of aws command
  - &s3-cmd-flags-values

  # Containers
  - &node
    - image: circleci/node:10

  - &python
    - image: circleci/python:2.7-jessie

directory: &directory
  working_directory: ~/repo

python-env: &python-env
  docker: *python
  <<: *directory

node-env: &node-env
  docker: *node
  <<: *directory

version: 2
jobs:
  build-test:
    <<: *node-env

    steps:
      - checkout
      - restore_cache: *restore-dependencies
      - run: *install-libsecret
      - run: *install-dependencies
      - save_cache: *save-dependencies
      - run: *reporter
      - run: *tests
      - run: *show-test-report

  build-apps-staging:
    <<: *node-env

    steps:
      - checkout
      - restore_cache: *restore-dependencies
      - run: *install-libsecret
      - run: *build-apps
      - save_cache: *save-apps

  deploy-apps-staging:
    <<: *python-env

    steps:
      - checkout
      - restore_cache: *restore-apps
      - run: *install-aws-cli

      - run:
          name: Deploy to S3
          command: |
            aws s3 rm s3://$EXPLORER_STAGING_BUCKET_NAME --recursive
            aws s3 sync packages/explorer/build s3://$EXPLORER_STAGING_BUCKET_NAME \
            --delete \
            --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
            aws s3 rm s3://$PLAYER_STAGING_BUCKET_NAME --recursive
            aws s3 sync packages/player/build s3://$PLAYER_STAGING_BUCKET_NAME \
            --delete \
            --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers

  build-apps-production:
    <<: *node-env

    steps:
      - checkout
      - run: *install-libsecret
      - run: *build-apps

      - save_cache:
          paths:
            - packages/explorer/build
            - packages/player/build
          key: production-apps-{{ .Revision }}

  deploy-apps-production:
    <<: *python-env

    steps:
      - checkout
      - restore_cache:
          keys:
            - production-apps-{{ .Revision }}
      - run: *install-aws-cli

      - run:
          name: Deploy to S3
          command: |
            aws s3 rm s3://$EXPLORER_PRODUCTION_BUCKET_NAME --recursive
            aws s3 sync packages/explorer/build s3://$EXPLORER_PRODUCTION_BUCKET_NAME \
            --delete \
            --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
            aws s3 rm s3://$PLAYER_PRODUCTION_BUCKET_NAME --recursive
            aws s3 sync packages/player/build s3://$PLAYER_PRODUCTION_BUCKET_NAME \
            --delete \
            --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers

workflows:
  version: 2
  staging-test-build-deploy:
    jobs:
      - build-test

      # Staging workflow for the apps
      - hold-staging-apps-deploy:
          type: approval
          requires:
            - build-test
      - build-apps-staging:
          requires:
            - hold-staging-apps-deploy
      - deploy-apps-staging:
          requires:
            - build-apps-staging

      # Production workflow for the apps
      - hold-production-apps-deploy:
          type: approval
          requires:
            - build-test
          filters:
            branches:
              only: master
      - build-apps-production:
          requires:
            - hold-production-apps-deploy
          filters:
            branches:
              only: master
      - deploy-apps-production:
          requires:
            - build-apps-production
          filters:
            branches:
              only: master
