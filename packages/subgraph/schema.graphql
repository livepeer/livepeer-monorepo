"""
Perform transcoding work for the network. The transcoders with the most delegated stake are elected as active transcoders that process transcode jobs for the network.
"""
type Transcoder @entity {
  "Transcoder's ETH address"
  id: ID!
  "Round in which the transcoder became active - 0 if inactive"
  activationRound: BigInt
  "Round in which the transcoder will become inactive"
  deactivationRound: BigInt
  "Round for which the stake was last updated while the transcoder is active"
  lastActiveStakeUpdateRound: BigInt
  "Whether or not the transcoder is active"
  active: Boolean
    @deprecated(reason: "Use `activationRound` and `deactivationRound`.")
  "Status of the transcoder"
  status: TranscoderStatus
  "Last round that the transcoder called reward"
  lastRewardRound: Round
  "% of block reward cut paid to transcoder by a delegator"
  rewardCut: BigInt
  "% of fees paid to delegators by transcoder"
  feeShare: BigInt
  "Price per segment for a stream"
  pricePerSegment: BigInt
    @deprecated(reason: "Price negotiation moved offchain")
  "Pending price per segment for next round if the transcoder is active"
  pendingPricePerSegment: BigInt
    @deprecated(reason: "Price negotiation moved offchain")
  "Pending block reward cut for next round if the transcoder is active"
  pendingRewardCut: BigInt @deprecated(reason: "Field no longer used")
  "Pending fee share for next round if the transcoder is active"
  pendingFeeShare: BigInt @deprecated(reason: "Field no longer used")
  "Total tokens delegated toward a transcoder (including their own)"
  totalStake: BigInt
  "Total fees generated by the transcoder (before distribution to delegators)"
  totalGeneratedFees: BigInt
  "Pools associated with the transcoder"
  pools: [Pool!] @derivedFrom(field: "delegate")
  "Delegators bonded to the transcoder"
  delegators: [Delegator!] @derivedFrom(field: "delegate")
  "Delegator that registered this transcoder"
  delegator: Delegator
}

"""
Represents a transcoder's rewards and fees to be distributed to delegators
"""
type Pool @entity {
  "Unique identifer for the pool (formed using the transcoder's address and round number)"
  id: ID!
  "Round associated with the pool"
  round: Round
  "Transcoder associated with the pool"
  delegate: Transcoder
  "Fees collected in the pool"
  fees: BigInt
  "Total reward tokens collected in the pool"
  rewardTokens: BigInt
  "Transcoder's total stake during the earnings pool's round"
  totalStake: BigInt
  "Transcoder's reward cut during the earnings pool's round"
  rewardCut: BigInt
  "Transcoder's fee share during the earnings pool's round"
  feeShare: BigInt
}

"""
The Livepeer protocol is round based and each round is represented by some number of Ethereum blocks.
"""
type Round @entity {
  "Round number"
  id: ID!
  "Whether the round was initialized"
  initialized: Boolean
  "Number of blocks this round lasts for"
  length: BigInt
  "Time at which this round was initialized"
  timestamp: BigInt
  "Block number at which this round was initialized"
  startBlock: BigInt
  "Pools associated with the round"
  pools: [Pool!] @derivedFrom(field: "round")
  "Mintable tokens for the round"
  mintableTokens: BigInt
  "Total stake moved from one delegate to another during the round"
  totalMovedStake: BigInt
  "Total amount of new stake introduced during the round"
  totalNewStake: BigInt
  "Total amount of fees generated this round"
  totalGeneratedFees: BigInt
}

"""
Bonded accounts who have delegated their stake towards a transcoder candidate
"""
type Delegator @entity {
  "ETH address of a delegator"
  id: ID!
  "ETH address of the delegate (the one whom the delegator has bonded to)"
  delegate: Transcoder
  "Round the delegator becomes bonded and delegated to its delegate"
  startRound: BigInt
  "Last round that the delegator claimed reward and fee pool shares"
  lastClaimRound: Round
  "Amount of Livepeer Token a delegator currently has bonded"
  bondedAmount: BigInt
  "Amount of Livepeer Token a delegator has bonded over its lifetime separate from rewards"
  principal: BigInt
  "Amount of Livepeer Token a delegator has unbonded over its lifetime"
  unbonded: BigInt
  "Amount of fees a delegator has collected"
  fees: BigInt
  "Amount of fees withdrawn"
  withdrawnFees: BigInt
  "Amount of Livepeer Token the delegator has delegated"
  delegatedAmount: BigInt
  "Delegator's token allowance"
  allowance: BigInt
  "Unbonding locks associated with the delegator"
  unbondingLocks: [UnbondingLock!] @derivedFrom(field: "delegator")
}

"""
Broadcasters pay transcoders to do the work of transcoding in exchange for fees
"""
type Broadcaster @entity {
  "ETH address of a broadcaster"
  id: ID!
  "Amount of funds deposited"
  deposit: BigInt
  "Amount of funds in reserve"
  reserve: BigInt
}

"""
Get an unbonding lock for a delegator
"""
type UnbondingLock @entity {
  "Unique unlock identifer"
  id: ID!
  "unbonding lock id"
  unbondingLockId: Int!
  "Delegator address this lock belongs to"
  delegator: Delegator!
  "Address of delegate unbonding from"
  delegate: Transcoder!
  "Amount being unbonded"
  amount: BigInt!
  "Round number when the unbonding amount will be available for withdrawal"
  withdrawRound: BigInt
}

type Protocol @entity {
  id: ID!
  currentRound: Round
  inflation: BigInt
  inflationChange: BigInt
  lastInitializedRound: BigInt
  lastRoundLengthUpdateRound: BigInt
  lastRoundLengthUpdateStartBlock: BigInt
  lockPeriod: BigInt
  maxEarningsClaimsRounds: BigInt
  numActiveTranscoders: BigInt
  paused: Boolean
  roundLength: BigInt
  roundLockAmount: BigInt
  targetBondingRate: BigInt
  totalActiveStake: BigInt
  totalGeneratedFees: BigInt
  totalWinningTickets: BigInt
  unbondingPeriod: BigInt
}

"""
The possible statuses of a transcoder
"""
enum TranscoderStatus @entity {
  NotRegistered
  Registered
}

"""
The possible poll choice
"""
enum PollChoice @entity {
  Yes
  No
}

type Poll @entity {
  id: ID!
  proposal: String!
  endBlock: BigInt!
  quorum: BigInt!
  quota: BigInt!
  tally: PollTally
  votes: [Vote!]
}

type PollTally @entity {
  id: ID!
  yes: BigInt
  no: BigInt
}

type Vote @entity {
  "Voter address + poll address"
  id: ID!
  "Vote caster"
  voter: String!
  "Stake weighted vote"
  voteStake: BigInt
  "This will be non-zero if voter is an orchestrator and any of the its delegators voted"
  nonVoteStake: BigInt
  choiceID: PollChoice
  poll: Poll
}

###############################################################################
#
# Event types
#
###############################################################################
interface Transaction {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
}

type Bond implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  bondedAmount: BigInt
  additionalAmount: BigInt
  newDelegate: Transcoder
  oldDelegate: Transcoder
  delegator: Delegator
}

type Unbond implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  amount: BigInt
  withdrawRound: BigInt
  unbondingLockId: Int
  delegate: Transcoder
  delegator: Delegator
}

type Reward implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  rewardTokens: BigInt
  delegate: Transcoder
}

type TranscoderActivated implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegate: Transcoder
  activationRound: BigInt
}

type TranscoderDeactivated implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegate: Transcoder
  deactivationRound: BigInt
}

type EarningsClaimed implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegator: Delegator
  delegate: Transcoder
  startRound: Round
  endRound: Round
  rewardTokens: BigInt
  fees: BigInt
}

type Rebond implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegator: Delegator
  delegate: Transcoder
  amount: BigInt
  unbondingLockId: Int
}

type TranscoderUpdated implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegate: Transcoder
  rewardCut: BigInt
  feeShare: BigInt
}

type TranscoderSlashed implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegate: Transcoder
  finder: Bytes
  penalty: BigInt
  finderReward: BigInt
}

type TranscoderResigned implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegate: Transcoder
}

type TranscoderEvicted implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegate: Transcoder
}

type WithdrawStake implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegator: Delegator
  unbondingLockId: Int
  amount: BigInt
}

type WithdrawFees implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegator: Delegator
  amount: BigInt
}

type Approval implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  spender: String
  from: String
  to: String
  round: Round
  delegator: Delegator
  amount: BigInt
}

type InitializeRound implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  delegator: Delegator
  amount: BigInt
}

type WinningTicketRedeemed implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  sender: String
  recipient: String
  faceValue: BigInt
  winProb: BigInt
  senderNonce: BigInt
  recipientRand: BigInt
  auxData: Bytes
}

type DepositFunded implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  sender: String
  amount: BigInt
}

type ReserveFunded implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  reserveHolder: String
  amount: BigInt
}

type ReserveClaimed implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  reserveHolder: String
  claimant: String
  amount: BigInt
}

type Withdrawal implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  sender: String
  deposit: BigInt
  reserve: BigInt
}

type SetCurrentRewardTokens implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  currentMintableTokens: BigInt
  currentInflation: BigInt
}

type Pause implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
}

type Unpause implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
}

type ParameterUpdate implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  param: String
}

type PollCreated implements Transaction @entity {
  id: ID!
  hash: String
  blockNumber: BigInt!
  gasUsed: BigInt!
  gasPrice: BigInt!
  timestamp: BigInt
  from: String
  to: String
  round: Round
  poll: Poll
  proposal: Bytes
  endBlock: BigInt
  quorum: BigInt
  quota: BigInt
}
