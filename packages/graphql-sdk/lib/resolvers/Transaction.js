'use strict'

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.id = id
exports.blockNumber = blockNumber
exports.timeStamp = timeStamp
exports.nonce = nonce
exports.blockHash = blockHash
exports.transactionIndex = transactionIndex
exports.from = from
exports.to = to
exports.value = value
exports.gas = gas
exports.gasPrice = gasPrice
exports.isError = isError
exports.status = status
exports.input = input
exports.contractAddress = contractAddress
exports.cumulativeGasUsed = cumulativeGasUsed
exports.gasUsed = gasUsed
exports.confirmations = confirmations
exports.contract = contract
exports.method = method
exports.params = params

/** Typedefs */

/** Resolvers */

/**
 * Gets the id for a Transaction
 * @param {Object} obj
 * @param {string} obj.id - The id of the transaction
 * @return {string}
 */
function id(obj) {
  return obj.id
}
/**
 * Gets the blockNumber for a Transaction
 * @param {Object} obj
 * @param {string} obj.blockNumber - The blockNumber of the transaction
 * @return {string}
 */

function blockNumber(obj) {
  return obj.blockNumber
}
/**
 * Gets the timeStamp for a Transaction
 * @param {Object} obj
 * @param {string} obj.timeStamp - The timeStamp of the transaction
 * @return {string}
 */

function timeStamp(obj) {
  return obj.timeStamp
}
/**
 * Gets the nonce for a Transaction
 * @param {Object} obj
 * @param {string} obj.nonce - The nonce of the transaction
 * @return {string}
 */

function nonce(obj) {
  return obj.nonce
}
/**
 * Gets the blockHash for a Transaction
 * @param {Object} obj
 * @param {string} obj.blockHash - The blockHash of the transaction
 * @return {string}
 */

function blockHash(obj) {
  return obj.blockHash
}
/**
 * Gets the transactionIndex for a Transaction
 * @param {Object} obj
 * @param {string} obj.transactionIndex - The transactionIndex of the transaction
 * @return {string}
 */

function transactionIndex(obj) {
  return obj.transactionIndex
}
/**
 * Gets the from for a Transaction
 * @param {Object} obj
 * @param {string} obj.from - The from of the transaction
 * @return {string}
 */

function from(obj) {
  return obj.from
}
/**
 * Gets the to for a Transaction
 * @param {Object} obj
 * @param {string} obj.to - The to of the transaction
 * @return {string}
 */

function to(obj) {
  return obj.to
}
/**
 * Gets the value for a Transaction
 * @param {Object} obj
 * @param {string} obj.value - The value of the transaction
 * @return {string}
 */

function value(obj) {
  return obj.value
}
/**
 * Gets the gas for a Transaction
 * @param {Object} obj
 * @param {string} obj.gas - The gas of the transaction
 * @return {string}
 */

function gas(obj) {
  return obj.gas
}
/**
 * Gets the gasPrice for a Transaction
 * @param {Object} obj
 * @param {string} obj.gasPrice - The gasPrice of the transaction
 * @return {string}
 */

function gasPrice(obj) {
  return obj.gasPrice
}
/**
 * Gets the isError for a Transaction
 * @param {Object} obj
 * @param {string} obj.isError - The isError of the transaction
 * @return {string}
 */

function isError(obj) {
  return obj.isError
}
/**
 * Gets the status for a Transaction
 * @param {Object} obj
 * @param {string} obj.status - The status of the transaction
 * @return {string}
 */

function status(obj) {
  return obj.status
}
/**
 * Gets the input for a Transaction
 * @param {Object} obj
 * @param {string} obj.input - The input of the transaction
 * @return {string}
 */

function input(obj) {
  return obj.input
}
/**
 * Gets the contractAddress for a Transaction
 * @param {Object} obj
 * @param {string} obj.contractAddress - The contractAddress of the transaction
 * @return {string}
 */

function contractAddress(obj) {
  return obj.contractAddress
}
/**
 * Gets the cumulativeGasUsed for a Transaction
 * @param {Object} obj
 * @param {string} obj.cumulativeGasUsed - The cumulativeGasUsed of the transaction
 * @return {string}
 */

function cumulativeGasUsed(obj) {
  return obj.cumulativeGasUsed
}
/**
 * Gets the gasUsed for a Transaction
 * @param {Object} obj
 * @param {string} obj.gasUsed - The gasUsed of the transaction
 * @return {string}
 */

function gasUsed(obj) {
  return obj.gasUsed
}
/**
 * Gets the confirmations for a Transaction
 * @param {Object} obj
 * @param {string} obj.confirmations - The confirmations of the transaction
 * @return {string}
 */

function confirmations(obj) {
  return obj.confirmations
}
/**
 * Gets the contract for a Transaction
 * @param {Object} obj
 * @param {string} obj.contract - The contract of the transaction
 * @return {string}
 */

function contract(obj) {
  return obj.contract
}
/**
 * Gets the method for a Transaction
 * @param {Object} obj
 * @param {string} obj.method - The method of the transaction
 * @return {string}
 */

function method(obj) {
  return obj.method
}
/**
 * Gets the params for a Transaction
 * @param {Object} obj
 * @param {string} obj.params - The params of the transaction
 * @return {[string|boolean]}
 */

function params(obj) {
  return obj.params
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
