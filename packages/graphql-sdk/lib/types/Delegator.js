'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

Object.defineProperty(exports, '__esModule', {
  value: true,
})
exports.default = void 0

var _DelegatorStatus = _interopRequireDefault(require('./DelegatorStatus'))

var Delegator =
  '\n\n"Users that bond tokens and delegate their bonded stake to other users, usually registered transcoders in exchange for shared rewards and fees."\ntype Delegator {\n\n  "The ETH address of a delegator"\n  id: String!\n\n  "The ENS name for an account"\n  ensName: String!\n\n  "The delegator\'s token allowance"\n  allowance: String!\n  \n  "The amount of Livepeer Token a delegator has bonded"\n  bondedAmount: String!\n  \n  "The amount of fees a delegator has collected"\n  fees: String!\n  \n  "The ETH address of the delegate (the one whom the delegator has bonded to)"\n  delegateAddress: String!\n  \n  "The amount of Livepeer Token the delegator has delegated"\n  delegatedAmount: String!\n  \n  "The last round that the delegator claimed reward and fee pool shares"\n  lastClaimRound: String!\n\n  "The total amount of ETH the delegator has earned through the current round"\n  pendingFees: String!\n\n  "The total amount of tokens the delegator has earned through the current round"\n  pendingStake: String!\n\n  "The round the delegator becomes bonded and delegated to its delegate"\n  startRound: String!\n  \n  "The status of a delegator"\n  status: DelegatorStatus!\n\n  "The amount of Livepeer Token to withdraw for a delegator"\n  withdrawAmount: String!\n\n  "The round the delegator can withdraw its stake."\n  withdrawRound: String!\n\n  "The ID of the delegator\'s next unbonding lock"\n  nextUnbondingLockId: String!\n\n}'

var _default = function _default() {
  return [Delegator, _DelegatorStatus.default]
}

exports.default = _default
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90eXBlcy9EZWxlZ2F0b3IuanMiXSwibmFtZXMiOlsiRGVsZWdhdG9yIiwiRGVsZWdhdG9yU3RhdHVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFFQSxJQUFNQSxTQUFTLHc4Q0FBZjs7ZUFvRGU7QUFBQSxTQUFNLENBQUNBLFNBQUQsRUFBWUMsd0JBQVosQ0FBTjtBQUFBLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRGVsZWdhdG9yU3RhdHVzIGZyb20gJy4vRGVsZWdhdG9yU3RhdHVzJ1xuXG5jb25zdCBEZWxlZ2F0b3IgPSBgXG5cblwiVXNlcnMgdGhhdCBib25kIHRva2VucyBhbmQgZGVsZWdhdGUgdGhlaXIgYm9uZGVkIHN0YWtlIHRvIG90aGVyIHVzZXJzLCB1c3VhbGx5IHJlZ2lzdGVyZWQgdHJhbnNjb2RlcnMgaW4gZXhjaGFuZ2UgZm9yIHNoYXJlZCByZXdhcmRzIGFuZCBmZWVzLlwiXG50eXBlIERlbGVnYXRvciB7XG5cbiAgXCJUaGUgRVRIIGFkZHJlc3Mgb2YgYSBkZWxlZ2F0b3JcIlxuICBpZDogU3RyaW5nIVxuXG4gIFwiVGhlIEVOUyBuYW1lIGZvciBhbiBhY2NvdW50XCJcbiAgZW5zTmFtZTogU3RyaW5nIVxuXG4gIFwiVGhlIGRlbGVnYXRvcidzIHRva2VuIGFsbG93YW5jZVwiXG4gIGFsbG93YW5jZTogU3RyaW5nIVxuICBcbiAgXCJUaGUgYW1vdW50IG9mIExpdmVwZWVyIFRva2VuIGEgZGVsZWdhdG9yIGhhcyBib25kZWRcIlxuICBib25kZWRBbW91bnQ6IFN0cmluZyFcbiAgXG4gIFwiVGhlIGFtb3VudCBvZiBmZWVzIGEgZGVsZWdhdG9yIGhhcyBjb2xsZWN0ZWRcIlxuICBmZWVzOiBTdHJpbmchXG4gIFxuICBcIlRoZSBFVEggYWRkcmVzcyBvZiB0aGUgZGVsZWdhdGUgKHRoZSBvbmUgd2hvbSB0aGUgZGVsZWdhdG9yIGhhcyBib25kZWQgdG8pXCJcbiAgZGVsZWdhdGVBZGRyZXNzOiBTdHJpbmchXG4gIFxuICBcIlRoZSBhbW91bnQgb2YgTGl2ZXBlZXIgVG9rZW4gdGhlIGRlbGVnYXRvciBoYXMgZGVsZWdhdGVkXCJcbiAgZGVsZWdhdGVkQW1vdW50OiBTdHJpbmchXG4gIFxuICBcIlRoZSBsYXN0IHJvdW5kIHRoYXQgdGhlIGRlbGVnYXRvciBjbGFpbWVkIHJld2FyZCBhbmQgZmVlIHBvb2wgc2hhcmVzXCJcbiAgbGFzdENsYWltUm91bmQ6IFN0cmluZyFcblxuICBcIlRoZSB0b3RhbCBhbW91bnQgb2YgRVRIIHRoZSBkZWxlZ2F0b3IgaGFzIGVhcm5lZCB0aHJvdWdoIHRoZSBjdXJyZW50IHJvdW5kXCJcbiAgcGVuZGluZ0ZlZXM6IFN0cmluZyFcblxuICBcIlRoZSB0b3RhbCBhbW91bnQgb2YgdG9rZW5zIHRoZSBkZWxlZ2F0b3IgaGFzIGVhcm5lZCB0aHJvdWdoIHRoZSBjdXJyZW50IHJvdW5kXCJcbiAgcGVuZGluZ1N0YWtlOiBTdHJpbmchXG5cbiAgXCJUaGUgcm91bmQgdGhlIGRlbGVnYXRvciBiZWNvbWVzIGJvbmRlZCBhbmQgZGVsZWdhdGVkIHRvIGl0cyBkZWxlZ2F0ZVwiXG4gIHN0YXJ0Um91bmQ6IFN0cmluZyFcbiAgXG4gIFwiVGhlIHN0YXR1cyBvZiBhIGRlbGVnYXRvclwiXG4gIHN0YXR1czogRGVsZWdhdG9yU3RhdHVzIVxuXG4gIFwiVGhlIGFtb3VudCBvZiBMaXZlcGVlciBUb2tlbiB0byB3aXRoZHJhdyBmb3IgYSBkZWxlZ2F0b3JcIlxuICB3aXRoZHJhd0Ftb3VudDogU3RyaW5nIVxuXG4gIFwiVGhlIHJvdW5kIHRoZSBkZWxlZ2F0b3IgY2FuIHdpdGhkcmF3IGl0cyBzdGFrZS5cIlxuICB3aXRoZHJhd1JvdW5kOiBTdHJpbmchXG5cbiAgXCJUaGUgSUQgb2YgdGhlIGRlbGVnYXRvcidzIG5leHQgdW5ib25kaW5nIGxvY2tcIlxuICBuZXh0VW5ib25kaW5nTG9ja0lkOiBTdHJpbmchXG5cbn1gXG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IFtEZWxlZ2F0b3IsIERlbGVnYXRvclN0YXR1c11cbiJdfQ==
