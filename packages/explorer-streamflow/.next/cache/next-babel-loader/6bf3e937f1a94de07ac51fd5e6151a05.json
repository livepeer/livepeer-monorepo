{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getEventSourceWrapper = getEventSourceWrapper;\nvar eventCallbacks = [];\n\nfunction EventSourceWrapper(options) {\n  var source;\n  var lastActivity = new Date();\n  var listeners = [];\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000;\n  }\n\n  init();\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect();\n    }\n  }, options.timeout / 2);\n\n  function init() {\n    source = new window.EventSource(options.path);\n    source.onopen = handleOnline;\n    source.onerror = handleDisconnect;\n    source.onmessage = handleMessage;\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected');\n    lastActivity = new Date();\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date();\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n\n    if (event.data.indexOf('action') !== -1) {\n      eventCallbacks.forEach(function (cb) {\n        return cb(event);\n      });\n    }\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer);\n    source.close();\n    setTimeout(init, options.timeout);\n  }\n\n  return {\n    close: function close() {\n      clearTimeout(timer);\n      source.close();\n    },\n    addMessageListener: function addMessageListener(fn) {\n      listeners.push(fn);\n    }\n  };\n}\n\nfunction getEventSourceWrapper(options) {\n  if (!options.ondemand) {\n    return {\n      addMessageListener: function addMessageListener(cb) {\n        eventCallbacks.push(cb);\n      }\n    };\n  }\n\n  return EventSourceWrapper(options);\n}","map":{"version":3,"sources":["/Users/adamsoffer/Workspace/livepeerjs/node_modules/next/dist/client/dev/error-overlay/eventsource.js"],"names":["exports","__esModule","getEventSourceWrapper","eventCallbacks","EventSourceWrapper","options","source","lastActivity","Date","listeners","timeout","init","timer","setInterval","handleDisconnect","window","EventSource","path","onopen","handleOnline","onerror","onmessage","handleMessage","log","console","event","i","length","data","indexOf","forEach","cb","clearInterval","close","setTimeout","clearTimeout","addMessageListener","fn","push","ondemand"],"mappings":"AAAA;;AAAaA,OAAO,CAACC,UAAR,GAAmB,IAAnB;AAAwBD,OAAO,CAACE,qBAAR,GAA8BA,qBAA9B;AAAoD,IAAMC,cAAc,GAAC,EAArB;;AAAwB,SAASC,kBAAT,CAA4BC,OAA5B,EAAoC;AAAC,MAAIC,MAAJ;AAAW,MAAIC,YAAY,GAAC,IAAIC,IAAJ,EAAjB;AAA4B,MAAIC,SAAS,GAAC,EAAd;;AAAiB,MAAG,CAACJ,OAAO,CAACK,OAAZ,EAAoB;AAACL,IAAAA,OAAO,CAACK,OAAR,GAAgB,KAAG,IAAnB;AAAyB;;AAAAC,EAAAA,IAAI;AAAG,MAAIC,KAAK,GAACC,WAAW,CAAC,YAAU;AAAC,QAAG,IAAIL,IAAJ,KAAWD,YAAX,GAAwBF,OAAO,CAACK,OAAnC,EAA2C;AAACI,MAAAA,gBAAgB;AAAI;AAAC,GAA7E,EAA8ET,OAAO,CAACK,OAAR,GAAgB,CAA9F,CAArB;;AAAsH,WAASC,IAAT,GAAe;AAACL,IAAAA,MAAM,GAAC,IAAIS,MAAM,CAACC,WAAX,CAAuBX,OAAO,CAACY,IAA/B,CAAP;AAA4CX,IAAAA,MAAM,CAACY,MAAP,GAAcC,YAAd;AAA2Bb,IAAAA,MAAM,CAACc,OAAP,GAAeN,gBAAf;AAAgCR,IAAAA,MAAM,CAACe,SAAP,GAAiBC,aAAjB;AAAgC;;AAAA,WAASH,YAAT,GAAuB;AAAC,QAAGd,OAAO,CAACkB,GAAX,EAAeC,OAAO,CAACD,GAAR,CAAY,iBAAZ;AAA+BhB,IAAAA,YAAY,GAAC,IAAIC,IAAJ,EAAb;AAAyB;;AAAA,WAASc,aAAT,CAAuBG,KAAvB,EAA6B;AAAClB,IAAAA,YAAY,GAAC,IAAIC,IAAJ,EAAb;;AAAwB,SAAI,IAAIkB,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACjB,SAAS,CAACkB,MAAxB,EAA+BD,CAAC,EAAhC,EAAmC;AAACjB,MAAAA,SAAS,CAACiB,CAAD,CAAT,CAAaD,KAAb;AAAqB;;AAAA,QAAGA,KAAK,CAACG,IAAN,CAAWC,OAAX,CAAmB,QAAnB,MAA+B,CAAC,CAAnC,EAAqC;AAAC1B,MAAAA,cAAc,CAAC2B,OAAf,CAAuB,UAAAC,EAAE;AAAA,eAAEA,EAAE,CAACN,KAAD,CAAJ;AAAA,OAAzB;AAAuC;AAAC;;AAAA,WAASX,gBAAT,GAA2B;AAACkB,IAAAA,aAAa,CAACpB,KAAD,CAAb;AAAqBN,IAAAA,MAAM,CAAC2B,KAAP;AAAeC,IAAAA,UAAU,CAACvB,IAAD,EAAMN,OAAO,CAACK,OAAd,CAAV;AAAkC;;AAAA,SAAM;AAACuB,IAAAA,KAAK,EAAC,iBAAI;AAACE,MAAAA,YAAY,CAACvB,KAAD,CAAZ;AAAoBN,MAAAA,MAAM,CAAC2B,KAAP;AAAgB,KAAhD;AAAiDG,IAAAA,kBAAkB,EAAC,SAASA,kBAAT,CAA4BC,EAA5B,EAA+B;AAAC5B,MAAAA,SAAS,CAAC6B,IAAV,CAAeD,EAAf;AAAoB;AAAxH,GAAN;AAAiI;;AAAA,SAASnC,qBAAT,CAA+BG,OAA/B,EAAuC;AAAC,MAAG,CAACA,OAAO,CAACkC,QAAZ,EAAqB;AAAC,WAAM;AAACH,MAAAA,kBAAkB,EAAC,4BAAAL,EAAE,EAAE;AAAC5B,QAAAA,cAAc,CAACmC,IAAf,CAAoBP,EAApB;AAAyB;AAAlD,KAAN;AAA2D;;AAAA,SAAO3B,kBAAkB,CAACC,OAAD,CAAzB;AAAoC","sourcesContent":["\"use strict\";exports.__esModule=true;exports.getEventSourceWrapper=getEventSourceWrapper;const eventCallbacks=[];function EventSourceWrapper(options){var source;var lastActivity=new Date();var listeners=[];if(!options.timeout){options.timeout=20*1000;}init();var timer=setInterval(function(){if(new Date()-lastActivity>options.timeout){handleDisconnect();}},options.timeout/2);function init(){source=new window.EventSource(options.path);source.onopen=handleOnline;source.onerror=handleDisconnect;source.onmessage=handleMessage;}function handleOnline(){if(options.log)console.log('[HMR] connected');lastActivity=new Date();}function handleMessage(event){lastActivity=new Date();for(var i=0;i<listeners.length;i++){listeners[i](event);}if(event.data.indexOf('action')!==-1){eventCallbacks.forEach(cb=>cb(event));}}function handleDisconnect(){clearInterval(timer);source.close();setTimeout(init,options.timeout);}return{close:()=>{clearTimeout(timer);source.close();},addMessageListener:function addMessageListener(fn){listeners.push(fn);}};}function getEventSourceWrapper(options){if(!options.ondemand){return{addMessageListener:cb=>{eventCallbacks.push(cb);}};}return EventSourceWrapper(options);}"]},"metadata":{},"sourceType":"script"}